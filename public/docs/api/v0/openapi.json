{
  "openapi": "3.1.0",
  "info": {
    "title": "Tulsa WebDevs Voting Service",
    "description": "API for casting votes on various topics/projects and submitting and managing proposals with a ranking and voting system.",
    "version": "0.0.3"
  },
  "servers": [
    {
      "url": "http://vote.tulsawebdevs.org",
      "description": "Voting Service API"
    },
    {
      "url": "http://localhost:8080",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/winner": {
      "summary": "Retrieve the top voted proposal for upcoming event",
      "parameters": [],
      "get": {
        "operationId": "getVoteWinner",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProposalWinner" },
                "example": {
                  "id": 1,
                  "created": "2021-09-01T12:00:00Z",
                  "updated": "2021-09-01T12:00:00Z",
                  "title": "My Proposal",
                  "description": "A longer description of the proposal",
                  "summary": "A short summary of the proposal",
                  "authorName": "John Doe",
                  "type": "topic",
                  "status": "closed",
                  "results": [
                    { "value": 2, "comment": null },
                    { "value": 2, "comment": null },
                    { "value": 2, "comment": null },
                    { "value": 0, "comment": null },
                    { "value": -1, "comment": null },
                    { "value": -2, "comment": null }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/401" },
          "404": { "$ref": "#/components/responses/404" },
          "default": { "$ref": "#/components/responses/500" }
        }
      }
    },
    "/drafts": {
      "summary": "Manage the current user's proposal drafts",
      "parameters": [
        { "$ref": "#/components/parameters/AuthorizationRequired" }
      ],
      "get": {
        "operationId": "listDrafts",
        "summary": "Get a list of the current user's drafts with pagination, filtering, and sorting",
        "parameters": [
          { "$ref": "#/components/parameters/PaginationParams" },
          { "$ref": "#/components/parameters/ProposalTypeFilter" }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DraftIndex" },
                "example": {
                  "limit": 1,
                  "drafts": [
                    {
                      "id": 1,
                      "created": "2021-09-01T12:00:00Z",
                      "updated": "2021-09-01T12:00:00Z",
                      "title": "My Draft",
                      "summary": "A short summary of the draft",
                      "description": "A longer description of the draft",
                      "type": "topic"
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/401" },
          "404": { "$ref": "#/components/responses/404" },
          "default": { "$ref": "#/components/responses/500" }
        }
      },
      "post": {
        "operationId": "createDraft",
        "summary": "Create a new draft",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Draft" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/Draft" },
                    { "$ref": "#/components/schemas/DatabaseObject" }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/401" },
          "default": { "$ref": "#/components/responses/500" }
        }
      },
      "put": {
        "operationId": "putDraft",
        "summary": "Replace an existing draft",
        "parameters": [{ "$ref": "#/components/parameters/RecordId" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Draft" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/Draft" },
                    { "$ref": "#/components/schemas/DatabaseObject" }
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/Draft" },
                    { "$ref": "#/components/schemas/DatabaseObject" }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/401" },
          "404": { "$ref": "#/components/responses/404" },
          "default": { "$ref": "#/components/responses/500" }
        }
      },
      "patch": {
        "operationId": "patchDraft",
        "summary": "Update an existing draft",
        "parameters": [{ "$ref": "#/components/parameters/RecordId" }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Draft" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/Draft" },
                    { "$ref": "#/components/schemas/DatabaseObject" }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/401" },
          "404": { "$ref": "#/components/responses/404" },
          "default": { "$ref": "#/components/responses/500" }
        }
      },
      "delete": {
        "operationId": "deleteDraft",
        "summary": "Delete a draft by ID",
        "parameters": [{ "$ref": "#/components/parameters/RecordId" }],
        "responses": {
          "204": { "$ref": "#/components/responses/204" },
          "401": { "$ref": "#/components/responses/401" },
          "404": { "$ref": "#/components/responses/404" },
          "default": { "$ref": "#/components/responses/500" }
        }
      }
    },
    "/proposals": {
      "summary": "Create or list proposals",
      "get": {
        "operationId": "listProposals",
        "summary": "Get a list of the proposals with pagination, filtering, and sorting",
        "parameters": [
          { "$ref": "#/components/parameters/AuthorizationOptional" },
          { "$ref": "#/components/parameters/PaginationParams" },
          { "$ref": "#/components/parameters/ProposalTypeFilter" },
          { "$ref": "#/components/parameters/ProposalStatusFilter" }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProposalIndex" },
                "example": {
                  "limit": 1,
                  "proposals": [
                    {
                      "id": 1,
                      "created": "2021-09-01T12:00:00Z",
                      "updated": "2021-09-01T12:00:00Z",
                      "title": "My Proposal",
                      "summary": "A short summary of the proposal",
                      "description": "A longer description of the proposal",
                      "type": "topic",
                      "status": "closed",
                      "authorName": "John Doe",
                      "userVote": {
                        "value": "1",
                        "comment": "I like this idea"
                      },
                      "results": [
                        { "value": "1", "comment": "I like this idea" },
                        { "value": "2", "comment": "I really like this idea" },
                        { "value": "3", "comment": null }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "404": { "$ref": "#/components/responses/404" },
          "default": { "$ref": "#/components/responses/500" }
        }
      },
      "post": {
        "operationId": "createProposal",
        "summary": "Create a new proposal",
        "parameters": [
          { "$ref": "#/components/parameters/AuthorizationRequired" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Proposal" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/Proposal" },
                    { "$ref": "#/components/schemas/ProposalState" },
                    { "$ref": "#/components/schemas/DatabaseObject" }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/401" },
          "default": { "$ref": "#/components/responses/500" }
        }
      }
    },
    "/proposals/vote": {
      "summary": "Manage a user's vote on a proposal",
      "parameters": [
        { "$ref": "#/components/parameters/AuthorizationRequired" },
        { "$ref": "#/components/parameters/RecordId" }
      ],
      "post": {
        "operationId": "submitVote",
        "summary": "Submit (or update) a vote on a proposal",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Vote" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/Vote" },
                    { "$ref": "#/components/schemas/DatabaseObject" }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/401" },
          "default": { "$ref": "#/components/responses/500" }
        }
      },
      "delete": {
        "operationId": "deleteVote",
        "summary": "Delete a user's proposal vote",
        "responses": {
          "204": { "$ref": "#/components/responses/204" },
          "401": { "$ref": "#/components/responses/401" },
          "404": { "$ref": "#/components/responses/404" },
          "default": { "$ref": "#/components/responses/500" }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "PaginationParams": {
        "name": "pagination",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/Paginated" }
      },
      "ProposalTypeFilter": {
        "name": "type",
        "in": "query",
        "required": false,
        "schema": { "type": "string", "enum": ["topic", "project"] },
        "description": "Filter items by type"
      },
      "ProposalStatusFilter": {
        "name": "status",
        "in": "query",
        "required": false,
        "schema": { "type": "string", "enum": ["open", "closed"] },
        "description": "Filter items by status"
      },
      "AuthorizationRequired": {
        "name": "Authorization",
        "in": "header",
        "required": true,
        "schema": { "type": "string" }
      },
      "AuthorizationOptional": {
        "name": "Authorization",
        "in": "header",
        "required": false,
        "schema": { "type": "string" }
      },
      "RecordId": {
        "name": "recordId",
        "in": "query",
        "required": true,
        "description": "ID of the record to get, update, or delete",
        "schema": { "type": "integer", "format": "int32" }
      }
    },
    "responses": {
      "204": { "description": "No Content" },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      },
      "404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      }
    },
    "schemas": {
      "DatabaseObject": {
        "type": "object",
        "required": ["id", "created", "updated"],
        "properties": {
          "id": { "type": "integer", "format": "int32" },
          "created": { "type": "string", "format": "date-time" },
          "updated": { "type": "string", "format": "date-time" }
        }
      },
      "Draft": {
        "type": "object",
        "properties": {
          "title": { "type": "string", "maxLength": 48 },
          "summary": { "type": "string", "maxLength": 255 },
          "description": { "type": "string", "maxLength": 2048 },
          "type": { "type": "string", "enum": ["topic", "project"] }
        }
      },
      "DraftIndex": {
        "allOf": [
          { "$ref": "#/components/schemas/Paginated" },
          {
            "type": "object",
            "required": ["drafts"],
            "properties": {
              "drafts": {
                "type": "array",
                "items": {
                  "allOf": [
                    { "$ref": "#/components/schemas/Draft" },
                    { "$ref": "#/components/schemas/DatabaseObject" }
                  ]
                }
              }
            }
          }
        ]
      },
      "ProposalWinner": {
        "type": "object",
        "allOf": [
          { "$ref": "#/components/schemas/Proposal" },
          { "$ref": "#/components/schemas/DatabaseObject" },
          {
            "type": "object",
            "required": ["status", "results", "authorName"],
            "properties": {
              "authorName": { "type": "string" },
              "status": { "type": "string", "enum": ["closed"] },
              "userVote": { "$ref": "#/components/schemas/Vote" },
              "results": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/Vote" }
              }
            }
          }
        ]
      },
      "Proposal": {
        "type": "object",
        "required": ["title", "summary", "type"],
        "properties": {
          "title": { "type": "string", "minLength": 8, "maxLength": 48 },
          "summary": { "type": "string", "minLength": 30, "maxLength": 255 },
          "description": { "type": "string", "maxLength": 2048 },
          "type": { "type": "string", "enum": ["topic", "project"] }
        }
      },
      "ProposalState": {
        "oneOf": [
          {
            "type": "object",
            "required": ["status", "results", "authorName"],
            "properties": {
              "authorName": { "type": "string" },
              "status": { "type": "string", "enum": ["closed"] },
              "userVote": { "$ref": "#/components/schemas/Vote" },
              "results": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/Vote" }
              }
            }
          },
          {
            "type": "object",
            "required": ["status", "authorName"],
            "properties": {
              "authorName": { "type": "string" },
              "status": { "type": "string", "enum": ["open"] },
              "userVote": { "$ref": "#/components/schemas/Vote" },
              "results": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/Vote" }
                  },
                  { "type": "null" }
                ]
              }
            }
          }
        ]
      },
      "ProposalIndex": {
        "allOf": [
          { "$ref": "#/components/schemas/Paginated" },
          {
            "type": "object",
            "required": ["proposals"],
            "properties": {
              "proposals": {
                "type": "array",
                "items": {
                  "allOf": [
                    { "$ref": "#/components/schemas/Proposal" },
                    { "$ref": "#/components/schemas/ProposalState" },
                    { "$ref": "#/components/schemas/DatabaseObject" }
                  ]
                }
              }
            }
          }
        ]
      },
      "Vote": {
        "type": "object",
        "required": ["value"],
        "properties": {
          "value": {
            "description": "Ranking values: -2 (strong disinterest), -1 (slight disinterest), 0 (neutral), 1 (slight interest), 2 (strong interest)",
            "type": "integer",
            "enum": [-2, -1, 0, 1, 2]
          },
          "comment": { "type": ["string", "null"], "maxLength": 255 }
        }
      },
      "Paginated": {
        "type": "object",
        "description": "Controls pagination of results",
        "properties": {
          "cursor": {
            "description": "Cursor for paginating through a list of items",
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "description": "In a request, the maximum number of items to return. In a response, the total number of items available (if known).",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": ["message"],
        "properties": { "message": { "type": "string" } }
      }
    }
  }
}
